version: '3.8' # Specify docker-compose version

services:
  neo4j:
    image: neo4j:latest # Use the official Neo4j image
    container_name: neo4j_db
    ports:
      - "7474:7474" # HTTP interface
      - "7687:7687" # Bolt interface (for driver connection)
    volumes:
      - neo4j_data:/data # Persist Neo4j data
      # Optional: Mount directories for plugins or logs if needed
      # - ./neo4j/plugins:/plugins
      # - ./neo4j/logs:/logs
    environment:
      # Set authentication based on environment variables (loaded from .env by compose)
      # Ensure NEO4J_PASSWORD is set in your .env file
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-password} # Default password 'password' if not set in .env
      # Optional: Configure memory limits if needed
      # NEO4J_server_memory_pagecache_size: 1G
      # NEO4J_server_memory_heap_initial__size: 1G
      # NEO4J_server_memory_heap_max__size: 2G
    healthcheck:
      # Basic healthcheck: Check if Bolt port is accessible
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider localhost:7687 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  mcp-server:
    build:
      context: . # Build from the Dockerfile in the current directory
      dockerfile: Dockerfile
    container_name: nova_mcp_server
    ports:
      - "8000:8000" # Map host port 8000 to container port 8000
    env_file:
      - .env # Load environment variables from .env file
    depends_on:
      neo4j:
        condition: service_healthy # Wait for Neo4j to be healthy before starting
    # Optional: Mount the app directory for live code reloading during development
    # volumes:
    #   - ./app:/app/app
    restart: unless-stopped

volumes:
  neo4j_data: # Define the named volume for Neo4j data persistence